{"ast":null,"code":"// package: jobspb\n// file: proto/jobs.proto\nvar proto_jobs_pb = require(\"../proto/jobs_pb\");\n\nvar grpc = require(\"@improbable-eng/grpc-web\").grpc;\n\nvar JobService = function () {\n  function JobService() {}\n\n  JobService.serviceName = \"jobspb.JobService\";\n  return JobService;\n}();\n\nJobService.CreateJob = {\n  methodName: \"CreateJob\",\n  service: JobService,\n  requestStream: false,\n  responseStream: false,\n  requestType: proto_jobs_pb.CreateJobRequest,\n  responseType: proto_jobs_pb.CreateJobResponse\n};\nJobService.GetAllJobs = {\n  methodName: \"GetAllJobs\",\n  service: JobService,\n  requestStream: false,\n  responseStream: false,\n  requestType: proto_jobs_pb.GetAllJobsRequest,\n  responseType: proto_jobs_pb.GetAllJobsResponse\n};\nexports.JobService = JobService;\n\nfunction JobServiceClient(serviceHost, options) {\n  this.serviceHost = serviceHost;\n  this.options = options || {};\n}\n\nJobServiceClient.prototype.createJob = function createJob(requestMessage, metadata, callback) {\n  if (arguments.length === 2) {\n    callback = arguments[1];\n  }\n\n  var client = grpc.unary(JobService.CreateJob, {\n    request: requestMessage,\n    host: this.serviceHost,\n    metadata: metadata,\n    transport: this.options.transport,\n    debug: this.options.debug,\n    onEnd: function (response) {\n      if (callback) {\n        if (response.status !== grpc.Code.OK) {\n          var err = new Error(response.statusMessage);\n          err.code = response.status;\n          err.metadata = response.trailers;\n          callback(err, null);\n        } else {\n          callback(null, response.message);\n        }\n      }\n    }\n  });\n  return {\n    cancel: function () {\n      callback = null;\n      client.close();\n    }\n  };\n};\n\nJobServiceClient.prototype.getAllJobs = function getAllJobs(requestMessage, metadata, callback) {\n  if (arguments.length === 2) {\n    callback = arguments[1];\n  }\n\n  var client = grpc.unary(JobService.GetAllJobs, {\n    request: requestMessage,\n    host: this.serviceHost,\n    metadata: metadata,\n    transport: this.options.transport,\n    debug: this.options.debug,\n    onEnd: function (response) {\n      if (callback) {\n        if (response.status !== grpc.Code.OK) {\n          var err = new Error(response.statusMessage);\n          err.code = response.status;\n          err.metadata = response.trailers;\n          callback(err, null);\n        } else {\n          callback(null, response.message);\n        }\n      }\n    }\n  });\n  return {\n    cancel: function () {\n      callback = null;\n      client.close();\n    }\n  };\n};\n\nexports.JobServiceClient = JobServiceClient;","map":{"version":3,"sources":["D:/Nikita/Mine/go/docker-grpc-golang-api/client/proto/proto/jobs_pb_service.js"],"names":["proto_jobs_pb","require","grpc","JobService","serviceName","CreateJob","methodName","service","requestStream","responseStream","requestType","CreateJobRequest","responseType","CreateJobResponse","GetAllJobs","GetAllJobsRequest","GetAllJobsResponse","exports","JobServiceClient","serviceHost","options","prototype","createJob","requestMessage","metadata","callback","arguments","length","client","unary","request","host","transport","debug","onEnd","response","status","Code","OK","err","Error","statusMessage","code","trailers","message","cancel","close","getAllJobs"],"mappings":"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","sourcesContent":["// package: jobspb\n// file: proto/jobs.proto\n\nvar proto_jobs_pb = require(\"../proto/jobs_pb\");\nvar grpc = require(\"@improbable-eng/grpc-web\").grpc;\n\nvar JobService = (function () {\n  function JobService() {}\n  JobService.serviceName = \"jobspb.JobService\";\n  return JobService;\n}());\n\nJobService.CreateJob = {\n  methodName: \"CreateJob\",\n  service: JobService,\n  requestStream: false,\n  responseStream: false,\n  requestType: proto_jobs_pb.CreateJobRequest,\n  responseType: proto_jobs_pb.CreateJobResponse\n};\n\nJobService.GetAllJobs = {\n  methodName: \"GetAllJobs\",\n  service: JobService,\n  requestStream: false,\n  responseStream: false,\n  requestType: proto_jobs_pb.GetAllJobsRequest,\n  responseType: proto_jobs_pb.GetAllJobsResponse\n};\n\nexports.JobService = JobService;\n\nfunction JobServiceClient(serviceHost, options) {\n  this.serviceHost = serviceHost;\n  this.options = options || {};\n}\n\nJobServiceClient.prototype.createJob = function createJob(requestMessage, metadata, callback) {\n  if (arguments.length === 2) {\n    callback = arguments[1];\n  }\n  var client = grpc.unary(JobService.CreateJob, {\n    request: requestMessage,\n    host: this.serviceHost,\n    metadata: metadata,\n    transport: this.options.transport,\n    debug: this.options.debug,\n    onEnd: function (response) {\n      if (callback) {\n        if (response.status !== grpc.Code.OK) {\n          var err = new Error(response.statusMessage);\n          err.code = response.status;\n          err.metadata = response.trailers;\n          callback(err, null);\n        } else {\n          callback(null, response.message);\n        }\n      }\n    }\n  });\n  return {\n    cancel: function () {\n      callback = null;\n      client.close();\n    }\n  };\n};\n\nJobServiceClient.prototype.getAllJobs = function getAllJobs(requestMessage, metadata, callback) {\n  if (arguments.length === 2) {\n    callback = arguments[1];\n  }\n  var client = grpc.unary(JobService.GetAllJobs, {\n    request: requestMessage,\n    host: this.serviceHost,\n    metadata: metadata,\n    transport: this.options.transport,\n    debug: this.options.debug,\n    onEnd: function (response) {\n      if (callback) {\n        if (response.status !== grpc.Code.OK) {\n          var err = new Error(response.statusMessage);\n          err.code = response.status;\n          err.metadata = response.trailers;\n          callback(err, null);\n        } else {\n          callback(null, response.message);\n        }\n      }\n    }\n  });\n  return {\n    cancel: function () {\n      callback = null;\n      client.close();\n    }\n  };\n};\n\nexports.JobServiceClient = JobServiceClient;\n\n"]},"metadata":{},"sourceType":"script"}